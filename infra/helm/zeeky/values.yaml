# Default values for zeeky
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  registry: docker.io
  repository: zeeky/zeeky
  tag: "1.0.0"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []

# Name override
nameOverride: ""
fullnameOverride: ""

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

# Security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  port: 8000
  targetPort: 8000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: api.zeeky.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: zeeky-api-tls
      hosts:
        - api.zeeky.local

# Frontend service configuration
frontend:
  enabled: true
  image:
    registry: docker.io
    repository: zeeky/zeeky-frontend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: zeeky.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: zeeky-frontend-tls
        hosts:
          - zeeky.local

# Resources
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 100m
    memory: 256Mi

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "zeeky-postgres-password"
    username: "zeeky"
    password: "zeeky-password"
    database: "zeeky"
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "zeeky-redis-password"
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

# MinIO configuration (for object storage)
minio:
  enabled: true
  auth:
    rootUser: "zeeky"
    rootPassword: "zeeky-minio-password"
  defaultBuckets: "zeeky-files,zeeky-backups"
  persistence:
    enabled: true
    size: 50Gi
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Environment variables
env:
  # Database
  POSTGRES_HOST: "postgresql"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "zeeky"
  POSTGRES_USER: "zeeky"
  POSTGRES_PASSWORD: "zeeky-password"
  
  # Redis
  REDIS_HOST: "redis-master"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: "zeeky-redis-password"
  
  # MinIO
  MINIO_ENDPOINT: "minio:9000"
  MINIO_ACCESS_KEY: "zeeky"
  MINIO_SECRET_KEY: "zeeky-minio-password"
  MINIO_BUCKET: "zeeky-files"
  
  # Application
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  API_PORT: "8000"
  
  # Security
  JWT_SECRET: "your-jwt-secret-change-in-production"
  ENCRYPTION_KEY: "your-encryption-key-change-in-production"
  
  # AI Services (set these in production)
  OPENAI_API_KEY: ""
  ANTHROPIC_API_KEY: ""
  GOOGLE_API_KEY: ""

# ConfigMap for additional configuration
configMap:
  create: true
  data:
    app.conf: |
      [database]
      host = postgresql
      port = 5432
      database = zeeky
      
      [redis]
      host = redis-master
      port = 6379
      
      [minio]
      endpoint = minio:9000
      bucket = zeeky-files
      
      [logging]
      level = info
      format = json

# Secret for sensitive data
secret:
  create: true
  data:
    # Base64 encoded values
    postgres-password: "emVla3ktcGFzc3dvcmQ="
    redis-password: "emVla3ktcmVkaXMtcGFzc3dvcmQ="
    minio-password: "emVla3ktbWluaW8tcGFzc3dvcmQ="
    jwt-secret: "eW91ci1qd3Qtc2VjcmV0LWNoYW5nZS1pbi1wcm9kdWN0aW9u"
    encryption-key: "eW91ci1lbmNyeXB0aW9uLWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg=="

# Service monitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  labels: {}

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 8000

# Pod security policy
podSecurityPolicy:
  enabled: false

# RBAC
rbac:
  create: true

# Service account for plugins
pluginServiceAccount:
  create: true
  name: "zeeky-plugin-sa"

# Plugin configuration
plugins:
  enabled: true
  registry: "https://plugins.zeeky.ai"
  autoUpdate: true
  allowCustom: true

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    retention: "15d"
  grafana:
    enabled: true
    adminPassword: "admin-password"
    persistence:
      enabled: true
      size: 10Gi

# Logging configuration
logging:
  enabled: true
  level: "info"
  format: "json"
  output: "stdout"

# Tracing configuration
tracing:
  enabled: true
  jaeger:
    enabled: true
    collector:
      replicas: 1

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "7d"
  destination: "s3://zeeky-backups"

# Development configuration
dev:
  enabled: false
  hotReload: false
  debugPort: 9229

# Production overrides
production:
  enabled: false
  replicas: 3
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi